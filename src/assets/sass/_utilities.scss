@import './sizing';

// POSITION
$positions: (
  'relative': relative,
  'absolute': absolute,
);

@each $position, $position-value in $positions {
  .position--#{$position} {
    position: $position-value !important;
  }
}

// DISPLAY
$displays: (
  'none': none,
  'block': block,
  'flex': flex,
  'inline': inline,
  'inline-block': inline-block,
  'inline-flex': inline-flex,
);

@each $display, $display-value in $displays {
  .d-#{$display} {
    display: $display-value;
  }
}

.d-flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

.flex-direction--row {
  flex-direction: row;
}

.flex-direction--column {
  flex-direction: column;
}

.align-items--center {
  align-items: center;
}

.align-items--start {
  align-items: flex-start;
}

.align-items--end {
  align-items: flex-end !important;
}

.justify-content--center {
  justify-content: center !important;
}

.justify-content--start {
  justify-content: flex-start !important;
}

.justify-content--end {
  justify-content: flex-end !important;
}

.justify-content--space-between {
  justify-content: space-between !important;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-no-wrap {
  flex-wrap: nowrap;
}

.flex-gap {
  // Default
  gap: $size-2xs;
}

.flex-full {
  flex: 1;
}

$gap-sizes: (
  'tiny': $size-tiny,
  '2xs': $size-2xs,
  'xs': $size-xs,
  'sm': $size-sm,
  'md': $size-md,
  'lg': $size-lg,
  'xl': $size-xl,
);

$gap-direction: 'row', 'column';

@each $gap, $gap-value in $gap-sizes {
  .gap--#{$gap} {
    gap: $gap-value !important;
  }

  @each $direction in $gap-direction {
    .gap-#{$direction}--#{$gap} {
      #{$direction}-gap: $gap-value !important;
    }
  }
}

//FLEX BASIS GRID
@for $i from 0 through 2 {
  .flex-grow--#{$i} {
    flex-grow: #{$i};
  }
}

@for $i from 0 through 2 {
  .flex-shrink--#{$i} {
    flex-shrink: #{$i};
  }
}

// FONT
.text-align--center {
  text-align: center;
}

.text-align--left {
  text-align: left;
}

.text-align--right {
  text-align: right;
}

$weights: (
  'regular': 400,
  'medium': 500,
  'semibold': 600,
  'bold': 700,
);

@each $weight, $weight-value in $weights {
  .font-weight--#{$weight} {
    font-weight: $weight-value !important;
  }
}

.font-style--italic {
  font-style: italic;
}

.text-decoration--underline {
  text-decoration: underline;
}

.text-decoration--none {
  text-decoration: none;
}

$transformers: (
  'none': none,
  'uppercase': uppercase,
  'lowercase': lowercase,
  'capitalize': capitalize,
);

@each $transform, $transform-value in $transformers {
  .text-transform--#{$transform} {
    text-transform: $transform-value;
  }
}

.word-break {
  white-space: pre-wrap;
  word-wrap: break-word;
}

.hyphen {
  max-width: 100%;
  white-space: normal;
  hyphens: auto;
}

// WIDTH, MAX WIDTH
$widths: (
  '10': 10%,
  '25': 25%,
  '33': 33.3%,
  '50': 50%,
  '60': 60%,
  '66': 66.6%,
  '75': 75%,
  '90': 90%,
  '100': 100%,
  'auto': auto,
);

@each $width, $width-value in $widths {
  .width--#{$width} {
    width: $width-value !important;
  }

  .max-width--#{$width} {
    max-width: $width-value !important;
  }
}

// HEIGHT, MAX HEIGHT
$heights: (
  '0': 0,
  '10': 10%,
  '25': 25%,
  '33': 33.3%,
  '50': 50%,
  '66': 66.6%,
  '75': 75%,
  '90': 90%,
  '100': 100%,
  'unset': unset,
);

@each $height, $height-value in $heights {
  .height--#{$height} {
    height: $height-value !important;
  }

  .max-height--#{$height} {
    max-height: $height-value;
  }
}

// CURSOR
.cursor--clickable {
  cursor: pointer;
}

.pointer-events--none {
  pointer-events: none;
}

.user-select--none {
  user-select: none;
  -webkit-tap-highlight-color: transparent;
}

// MARGIN AND PADDING
$sizes: (
  'mini': $size-mini,
  'tiny': $size-tiny,
  '2xs': $size-2xs,
  'xs': $size-xs,
  'sm': $size-sm,
  'md': $size-md,
  'lg': $size-lg,
  'xl': $size-xl,
  'auto': auto,
  '0': 0,
);
$directions: 'left', 'right', 'top', 'bottom';

@each $size, $size-value in $sizes {
  .margin--#{$size} {
    margin: $size-value !important;
  }

  .margin-neg--#{$size} {
    margin: -$size-value !important;
  }

  .margin-inline--#{$size} {
    margin-inline: $size-value !important;
  }

  .margin-inline-neg--#{$size} {
    margin-inline: -$size-value !important;
  }

  .margin-block--#{$size} {
    margin-block: $size-value !important;
  }

  @if ($size != 'auto') {
    .padding--#{$size} {
      padding: $size-value !important;
    }

    .padding-neg--#{$size} {
      padding: -$size-value !important;
    }

    .padding-inline--#{$size} {
      padding-inline: $size-value !important;
    }

    .padding-block--#{$size} {
      padding-block: $size-value !important;
    }
  }

  @each $direction in $directions {
    .margin-#{$direction}--#{$size} {
      margin-#{$direction}: if($size == 'none', 0, $size-value) !important;
    }

    .margin-neg-#{$direction}--#{$size} {
      margin-#{$direction}: -$size-value !important;
    }

    @if ($size != 'auto') {
      .padding-#{$direction}--#{$size} {
        padding-#{$direction}: if($size == 'none', 0, $size-value) !important;
      }

      .padding-neg-#{$direction}--#{$size} {
        padding-#{$direction}: -$size-value !important;
      }
    }
  }
}

// OVERFLOW
$overflow: (
  'auto': auto,
  'visible': visible,
  'hidden': hidden,
  'scroll': scroll,
);
$overflow-axis: 'x', 'y';

@each $overflow, $overflow-value in $overflow {
  .overflow--#{$overflow} {
    overflow: $overflow-value !important;
  }

  @each $axis in $overflow-axis {
    .overflow-#{$axis}--#{$overflow} {
      overflow-#{$axis}: $overflow-value !important;
    }
  }
}

// BORDER
$borders: (
  '1': 1px,
  '2': 2px,
  '0': 0,
);

@each $border, $border-value in $borders {
  .border--#{$border} {
    border-width: $border-value !important;
    border-style: solid !important;
  }

  @each $direction in $directions {
    .border-#{$direction}--#{$border} {
      border-#{$direction}-width: $border-value !important;
      border-#{$direction}-style: solid !important;
    }
  }
}

.visibility--hidden {
  visibility: hidden;
}

.fade {
  opacity: 0;
  transition: all linear 50ms;
}

.transition--sm {
  transition: all linear 50ms;
}

.transition--md {
  transition: all linear 150ms;
}
